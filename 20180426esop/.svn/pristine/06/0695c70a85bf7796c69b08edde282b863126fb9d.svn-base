package com.esop.common.uploadFile;

import com.esop.pub.ServiceUrlBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.xml.namespace.QName;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by wangbl on 2017/3/1.
 */
@RestController
public class FileUploadController {
    @Value("${uploadFileService}")
    private String uploadFileService;
    private RestTemplate restTemplate;
    @Autowired
    ServiceUrlBean serviceUrlBean ;
    public FileUploadController() {
        SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();
        requestFactory.setBufferRequestBody(false);
        this.restTemplate = new RestTemplate(requestFactory);
    }
    //文件下载
    @GetMapping("/fileLoad/{pathValue}/{fileName:.+}")
    @ResponseBody
    public ResponseEntity<Resource> serveFile(@PathVariable String fileName, @PathVariable("pathValue")String pathValue,String oa_file) {
        MultiValueMap<String,Object> parts = new LinkedMultiValueMap<String,Object>();
        System.out.println("传入值pathValue="+pathValue);
        System.out.println("传入值oa_file="+fileName);
        parts.add("filename",fileName);
        parts.add("pathValue",pathValue);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        HttpEntity<MultiValueMap<String,Object>> request = new HttpEntity<MultiValueMap<String,Object>>(parts, headers);
        ResponseEntity<Resource> responseEntity=restTemplate.exchange("http://"+uploadFileService+"/fileG", HttpMethod.POST, request, Resource.class);
        Resource file = responseEntity.getBody();
        String filename="";
        try {
            //如果是oa系统传过来的文件，文件名取oa_file
            if(oa_file==null) {
                filename = new String(fileName.getBytes("GBK"), "iso8859-1");
                //filename = fileName;
            }else{
                filename = new String(oa_file.getBytes("GBK"), "iso8859-1");
                //filename = oa_file;
            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return ResponseEntity
                .ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + filename)
                .body(file);
    }
    //文件上传,ie8无法接返回值，只能屏蔽返回结果，有返回结果ie8浏览器会报错
    @RequestMapping("/fileUpload")
    //public Map<String,String> handleFileUpload(@RequestParam("file") MultipartFile file,String related_id,
    public void handleFileUpload(@RequestParam("file") MultipartFile file,String related_id){
        System.out.println("(related_id="+related_id+"{file=}"+file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("\\")+1));
        MultiValueMap<String,Object> parts = new LinkedMultiValueMap<String,Object>();
        //真实名称
        String filename="";
        //转码后的名称
        String fileName="";
        Map<String,String> map=new HashMap<String,String>();
        try {
            if(file.getOriginalFilename().lastIndexOf("\\")>0) {
                filename=file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("\\") + 1);
                fileName = URLEncoder.encode(filename, "UTF-8");
            }else {
                filename = file.getOriginalFilename();
                fileName = URLEncoder.encode(filename, "UTF-8");
            }
            parts.add("file", new MultipartInputStreamFileResource(file.getInputStream(),fileName));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        HttpEntity<MultiValueMap<String,Object>> request = new HttpEntity<MultiValueMap<String,Object>>(parts, headers);
        ResponseEntity<Map> responseEntity=restTemplate.exchange("http://"+uploadFileService+"/fileU", HttpMethod.POST, request, Map.class);
        map=responseEntity.getBody();
        if(related_id.equals("")){
            map.put("related_id",restTemplate.getForObject("http://"+serviceUrlBean.getServiceUrl()+"/uploadFileGetRelatedID.json",String.class));
        }else{
            map.put("related_id",related_id);
        }
        //调用服务端接口完成数据库数据查询插入操作
        map.put("id",restTemplate.getForObject("http://"+serviceUrlBean.getServiceUrl()+"/uploadFileGetID.json",String.class));
        MultiValueMap<String, String> mapinsert= new LinkedMultiValueMap<String, String>();
        mapinsert.add("id", map.get("id"));
        mapinsert.add("name", fileName);//真实名称，weblogic中会出现乱码，只好进行编码和转码
        mapinsert.add("path", map.get("pathValue"));
        mapinsert.add("related_id", map.get("related_id"));
        HttpEntity<MultiValueMap<String, String>> requestparam = new HttpEntity<MultiValueMap<String, String>>(mapinsert, headers);
        int response = restTemplate.postForObject("http://"+serviceUrlBean.getServiceUrl()+"/uploadFileInsert.json",requestparam,int.class);
        System.out.println("文件上传插入数据结果=="+response);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        //return map;
    }
    //删除只是更新状态，将valid字段更新为0
    @PostMapping("/deleteFile")
    public Map<String,String> deleteFile(UploadFileInfoDto uploadFileInfoDto) {
        System.out.println("FileUploadController-fileID="+uploadFileInfoDto.getId());
        HttpHeaders headers = new HttpHeaders();
        Map result= new HashMap<String,String>();
        MultiValueMap<String, String> mapinsert= new LinkedMultiValueMap<String, String>();
        mapinsert.add("id", uploadFileInfoDto.getId());
        HttpEntity<MultiValueMap<String, String>> requestparam = new HttpEntity<MultiValueMap<String, String>>(mapinsert, headers);
        int i = restTemplate.postForObject("http://"+serviceUrlBean.getServiceUrl()+"/uploadFileUpdate.json",requestparam,int.class);
        if(i==1)
            result.put("result","成功");
        else
            result.put("result","失败");
        return result;
    }
    private class MultipartInputStreamFileResource extends InputStreamResource {

        private final String filename;

        public MultipartInputStreamFileResource(InputStream inputStream, String filename) {
            super(inputStream);
            this.filename = filename;
        }
        @Override
        public String getFilename() {
            return this.filename;
        }

        @Override
        public long contentLength() throws IOException {
            return -1; // we do not want to generally read the whole stream into memory ...
        }
    }
}
