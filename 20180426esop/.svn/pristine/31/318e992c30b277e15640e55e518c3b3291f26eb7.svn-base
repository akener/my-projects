package com.esop.common.word;

import java.awt.Color;
import java.io.*;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.esop.cqDevelopment.elecPack.dto.SeContractChargesInfo;
import com.esop.cqDevelopment.elecPack.dto.SeElecPackInfoDto;
import com.esop.cqDevelopment.elecPack.dto.SeProductChargeInfoDto;
import com.lowagie.text.pdf.PdfPageEventHelper;
import com.lowagie.text.pdf.PdfWriter;
import org.dom4j.io.SAXReader;

import com.lowagie.text.BadElementException;
import com.lowagie.text.Cell;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.HeaderFooter;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.Table;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.rtf.RtfWriter2;
import com.lowagie.text.rtf.field.RtfPageNumber;
import com.lowagie.text.rtf.field.RtfTotalPageNumber;
import com.lowagie.text.rtf.headerfooter.RtfHeaderFooter;
import org.springframework.beans.factory.annotation.Value;

import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import javax.ws.rs.Path;

/**
 * Create on 2017-5-11
 * @author: zhongxl
 * @Title: ClassName
 * @Description：读取合同模板文件，动态生成合同附件，附件格式为.doc
 * @version 1.0
 * update_data:      update_author:      update_note:
 */
public class CreateWord {
    public static BaseFont bfChinese=null;
    public static Font titleFont=null;
    public static Font titleFont1=null;
    public static Font underlinetitleFont1=null;
    public static Font contextFont=null;
    public static Font underlineFont=null;
    public static Font footerFont=null;



    /**
     * 通过构造方法初始化 设置中文字体样式
     */
    public CreateWord(){
        try {
            //
            //bfChinese=BaseFont.createFont("/fonts/simsun.ttf",BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
            bfChinese=BaseFont.createFont("STSongStd-Light","UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
			/*titleFont = new Font(bfChinese, 20, Font.BOLD,Color.black);
			titleFont1 = new Font(bfChinese, 14, Font.BOLD,Color.black);
			underlinetitleFont1 = new Font(bfChinese, 14, Font.UNDERLINE,Color.black);
			contextFont = new Font(bfChinese, 12, Font.BOLD,Color.black);
			underlineFont = new Font(bfChinese, 12, Font.UNDERLINE,Color.black);
			footerFont = new Font(bfChinese, 10, Font.BOLD,Color.black);*/
            titleFont = new Font(bfChinese, 20, Font.BOLD,Color.black);
            titleFont1 = new Font(bfChinese, 12, Font.BOLD,Color.black);
            underlinetitleFont1 = new Font(bfChinese, 12, Font.UNDERLINE,Color.black);
            contextFont = new Font(bfChinese, 12, Font.NORMAL,Color.black);
            underlineFont = new Font(bfChinese, 12, Font.UNDERLINE,Color.black);
            footerFont = new Font(bfChinese, 10, Font.NORMAL,Color.black);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     *
     * Create on 2017-5-11
     * @author: zhongxl
     * @Title: getAlign
     * @Description: 获取过模板中配置的样式，获取对应的值
     * @param alignment_class
     * @return
     * @version 1.0
     * Copyright(c) 北京思特奇信息技术股份有限公司
     * update_data:       update_author:       update_note:
     */
    private static int getAlign(String alignment_class) {
        if("ALIGN_CENTER".equals(alignment_class)){
            return Element.ALIGN_CENTER;
        }else if("ALIGN_LEFT".equals(alignment_class)){
            return Element.ALIGN_LEFT;
        }else if("ALIGN_RIGHT".equals(alignment_class)){
            return Element.ALIGN_RIGHT;
        }else if("ALIGN_MIDDLE".equals(alignment_class)){
            return Element.ALIGN_MIDDLE;
        }else if("ALIGN_TOP".equals(alignment_class)){
            return Element.ALIGN_TOP;
        }else if("ALIGN_BOTTOM".equals(alignment_class)){
            return Element.ALIGN_BOTTOM;
        }
        return Element.ALIGN_LEFT;
    }
    /**
     *
     * Create on 2017-5-11
     * @author: zhongxl
     * @Title: getFont
     * @Description: 通过模板中配置的字体样式表示，获取对应的字体
     * @param font_class
     * @return
     * @version 1.0
     * Copyright(c) 北京思特奇信息技术股份有限公司
     * update_data:       update_author:       update_note:
     */
    private static Font getFont(String font_class) {
        if("titleFont".equals(font_class)){
            return titleFont;
        }else if("contextFont".equals(font_class)){
            return contextFont;
        }else if("underlineFont".equals(font_class)){
            return underlineFont;
        }else if("titleFont1".equals(font_class)){
            return titleFont1;
        }else if("underlinetitleFont1".equals(font_class)){
            return underlinetitleFont1;
        }
        return contextFont;
    }

    /**
     *
     * Create on 2017-5-11
     * @author: zhongxl
     * @Title: setFooterAndHeader
     * @Description: 设置页眉页脚
     * @param document
     * @return
     * @version 1.0
     * Copyright(c) 北京思特奇信息技术股份有限公司
     * update_data:       update_author:       update_note:
     * @param dataMap  目前所有合同，页眉页脚默认一致，后续如有特殊化，可根据 root_id和dataMap中的数据，做特殊化处理
     * @param root_id
     */
    public Document setFooterAndHeader(Document document, Map<String, Object> dataMap, String root_id){
        //String imagepath="d:\\b.gif";
        //String imagepath=System.getProperty("user.dir")+"/_jsp_compiled_cmweb/jsp_servlet/test.jpg";
        //添加页眉
        /*Image headerImage=null;
        try {
            headerImage = Image.getInstance(imagepath);
        } catch (BadElementException e) {
            e.printStackTrace();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        headerImage.scaleToFit(115f, 27f);
        Paragraph headerPara = new Paragraph();
        headerPara.add(headerImage);
        */
        String bak1 = String.valueOf(dataMap.get("bak1")) ;//获取map中的合同bak1号（编号）
        String bak3 =String.valueOf( dataMap.get("bak3"));//获取map中的合同bak3号(流水号)
        String phrase = bak3;
        if (null != dataMap.get("bak1")){
            phrase = phrase+"\r\n"+bak1;
        }
        HeaderFooter header=new HeaderFooter(new Phrase(phrase,footerFont),false);
        header.setAlignment(Element.ALIGN_RIGHT);//显示在右边
        header.setBorder(Rectangle.NO_BORDER);//不显示边框
        document.setHeader(header);
        // 添加页脚 因为需要获取总页数，所以在TextWaterMarkPdfPageEvent类里面去写
        /*Paragraph parafooter = new Paragraph();
        parafooter.setFont(new Font(footerFont));
        parafooter.add(new Phrase("第"));
        parafooter.add(new RtfPageNumber());
        parafooter.add(new Phrase("页  共"));
        parafooter.add(new RtfTotalPageNumber());
        parafooter.add(new Phrase("页"));

        HeaderFooter footer = new HeaderFooter(new Phrase("-",new Font(bfChinese)),new Phrase("-",new Font(bfChinese)));
        footer.setAlignment(Element.ALIGN_CENTER);
        footer.setBorder(Rectangle.NO_BORDER);
        document.setFooter(footer);*/
        /*headerImage=null;
        parafooter=null;
        footer=null;*/
        header=null;
        return document;
    }

    /**
     *
     * Create on 2017-5-11
     * @author: zhongxl
     * @Title: createContractDocunment
     * @Description: 根据 root_id 获取对应的合同模板，生成合同文件，
     * @param dataMap  合同相关信息，用于填充模板中需要动态生成的数据
     * @param contract_file_name   要保存成的合同名称，根据业务生成后传入
     * @param  seElecPackInfoDto 模板
     * @return
     * @version 1.0
     * Copyright(c) 北京思特奇信息技术股份有限公司
     * update_data:       update_author:       update_note:
     */
    public String createContractDocunment(String type, Map<String, Object> dataMap, String contract_file_name, SeElecPackInfoDto seElecPackInfoDto, String contract_pdf_path, String model_xml_path, String imgPath) throws Exception{
        //2.创建Document对象,设置页眉页脚
        Document document = new Document(PageSize.A4);
        document.setMargins(90f, 90f, 72f, 72f);
        String filepath = contract_pdf_path+contract_file_name+".pdf";
        FileOutputStream fileOutputStream = new FileOutputStream(filepath);
        String xml_name = seElecPackInfoDto.getXml_name();
        if("pdf".equals(type)){
            PdfWriter writer = PdfWriter.getInstance(document,fileOutputStream);//生成pdf
            writer.setPageEvent(new TextWaterMarkPdfPageEvent(imgPath));//水印
        }else{
            RtfWriter2 writer = RtfWriter2.getInstance(document, fileOutputStream);//生成word
        }
        // 建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中
        // String filepath = "D:\\"+contract_file_name+".pdf";
        // String filepath = PropertiesUtil.getProperty("doc.remotePath")+contract_file_name+".doc";
        /*try {
            fileOutputStream = new FileOutputStream(filepath);
            RtfWriter2.getInstance(document, fileOutputStream);
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }*/
        CreateWord cw = new CreateWord();
        document = cw.setFooterAndHeader(document,dataMap,xml_name);
        document.open();


        Paragraph paragraph = null;
        Table table = null;

        //3.读取模板文件
        //  String fileNameWithPath = "d:\\contract_template_"+root_id+"_v1.0.xml";
        String fileNameWithPath = model_xml_path+xml_name+".xml";
//		String fileNameWithPath = PropertiesUtil.getProperty("docView.properties","doc.contract_template_path")+"contract_template_"+root_id+"_v1.0.xml";
        File file = new File(fileNameWithPath);
        try {
            InputStream inputStream = null;
            inputStream = new FileInputStream(file);
            //InputStream inputStream =  this.getClass().getResourceAsStream("/contract_template/contract_template_"+root_id+"_v1.0.xml");
            SAXReader reader = new SAXReader();
            org.dom4j.Document xmldocument = null;
            try {
                xmldocument = reader.read(inputStream);
                inputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

            String alignment_class = "";
            String spacing_before = "";
            String paragraph_type = "";
            String first_line_indent = "";
            String new_page_flag = "";

            org.dom4j.Element root=xmldocument.getRootElement();
            org.dom4j.Element paragraphxml = root.element("PARAGRAPH_LIST");
            List<org.dom4j.Element> paragraph_list = paragraphxml.elements("PARAGRAPH");
            for (Iterator<?> paragraph_iterator = paragraph_list.iterator(); paragraph_iterator.hasNext();) {
                org.dom4j.Element paragraph_element = (org.dom4j.Element) paragraph_iterator.next();
                alignment_class = paragraph_element.elementText("ALIGNMENT_CLASS");
                spacing_before = paragraph_element.elementText("SPACING_BEFORE");
                first_line_indent = paragraph_element.elementText("FIRST_LINE_INDENT");
                new_page_flag = paragraph_element.elementText("NEW_PAGE_FLAG");
                if("Y".equals(new_page_flag)){
                    document.newPage();
                }

                paragraph_type = paragraph_element.elementText("PARAGRAPH_TYPE");
                org.dom4j.Element text = paragraph_element.element("TEXT_LIST");
                List<org.dom4j.Element> text_list = text.elements("TEXT");
                if(!StringUtils.isEmpty(paragraph_type) && "TABLE".equals(paragraph_type)){
                    String table_col_span = paragraph_element.elementText("TABLE_COL_SPAN");
                    String table_row_span = paragraph_element.elementText("TABLE_ROW_SPAN");
                    String auto_fill_flag = paragraph_element.elementText("AUTO_FILL_FLAG");
                    String border_width = paragraph_element.elementText("BORDER_WIDTH");
                    String cells_width = paragraph_element.elementText("CELLS_WIDTH");
                    String table_width = paragraph_element.elementText("TABLE_WIDTH");
                    String[] cells_width_arr =  cells_width.split(",");
                    table = new Table(Integer.parseInt(table_col_span),Integer.parseInt(table_row_span));
                    int width[] = new int [cells_width_arr.length];//设置每列宽度比例
                    for(int index=0;index<cells_width_arr.length;index++){
                        width[index]=Integer.parseInt(cells_width_arr[index]);
                    }
                    table.setWidths(width);
                    table.setWidth(Integer.parseInt(table_width));
                    if("Y".equals(auto_fill_flag)){
                        table.setAutoFillEmptyCells(true);//自动填满
                    }
                    table.setBorderWidth(Integer.parseInt(border_width));//边框宽度
                    table = addTableCell(table,text_list,dataMap,border_width);
                    document.add(table);
                }else{
                    paragraph = new Paragraph();
                    paragraph = addParagraphText(paragraph,text_list,dataMap,document,seElecPackInfoDto.getPro_type());
                    paragraph.setAlignment(getAlign(alignment_class));
                    paragraph.setSpacingBefore(Integer.parseInt(spacing_before));
                    paragraph.setFirstLineIndent(Integer.parseInt(first_line_indent));
                    document.add(paragraph);
                    paragraph.clear();
                }
            }




            document.close();



            return filepath;
        } catch (DocumentException e) {
            e.printStackTrace();
            return "";
        } catch (FileNotFoundException e){
            e.printStackTrace();
            return "";
        }
    }

    /**
     *
     * Create on 2017-5-11
     * @author: zhongxl
     * @Title: addTableCell
     * @Description: 给表格中写入单元格内容
     * @param table
     * @param text_list
     * @param dataMap
     * @return
     * @version 1.0
     * Copyright(c) 北京思特奇信息技术股份有限公司
     * update_data:       update_author:       update_note:
     * @param border_width
     */
    private Table addTableCell(Table table, List<org.dom4j.Element> text_list,
                               Map<String, Object> dataMap, String border_width) {
        String text_type = "";
        String text_value = "";
        String font_class = "";
        String row_span = "";
        String col_span = "";
        String vertical_alignment = "";
        String horizontal_alignment = "";
        for (Iterator<?> text_iterator = text_list.iterator(); text_iterator.hasNext();) {
            org.dom4j.Element text_element = (org.dom4j.Element) text_iterator.next();
            text_type = text_element.elementText("TEXT_TYPE");
            text_value = text_element.elementText("TEXT_VALUE");
            font_class = text_element.elementText("FONT_CLASS");
            row_span = text_element.elementText("ROW_SPAN");
            col_span = text_element.elementText("COL_SPAN");
            vertical_alignment = text_element.elementText("VERTICAL_ALIGNMENT");
            horizontal_alignment = text_element.elementText("HORIZONTAL_ALIGNMENT");
            if("1".equals(text_type)){
                text_value=(String) dataMap.get(text_value);
                String text_value_prefix = text_element.elementText("TEXT_VALUE_PREFIX");
                String text_value_suffix = text_element.elementText("TEXT_VALUE_SUFFIX");
                if(null==text_value_prefix){text_value_prefix=" ";}
                if(null==text_value){text_value=" ";}
                if(null==text_value_suffix){text_value_suffix=" ";}
                text_value=text_value_prefix+text_value+text_value_suffix;
            }
            Paragraph paragraph = new Paragraph();
            Phrase phrase = new Phrase(text_value, getFont(font_class));


            paragraph.add(phrase);
            Cell cell=null;
            try {
                cell = new Cell(paragraph);
            } catch (BadElementException e) {
                e.printStackTrace();
            }
            cell.setVerticalAlignment(getAlign(vertical_alignment));//垂直对齐
            cell.setHorizontalAlignment(getAlign(horizontal_alignment));//水平对齐
            cell.setRowspan(Integer.parseInt(row_span));
            cell.setColspan(Integer.parseInt(col_span));
            cell.setBorderWidth(Integer.parseInt(border_width));
            table.addCell(cell);
//			phrase.clear();
//			paragraph.clear();
//			cell.clear();
        }
        return table;
    }

    /**
     *
     * Create on 2017-5-11
     * @author: zhongxl
     * @Title: addParagraphText
     * @Description: 给普通文字段落中写入文本信息
     * @param paragraph
     * @param text_list
     * @param dataMap
     * @return
     * @version 1.0
     * Copyright(c) 北京思特奇信息技术股份有限公司
     * update_data:       update_author:       update_note:
     */
    private Paragraph addParagraphText(Paragraph paragraph,List<org.dom4j.Element> text_list, Map<String, Object> dataMap,Document document,String pro_type ) throws Exception {
        String text_type = "";
        String text_value = "";
        String font_class = "";
        for (Iterator<?> text_iterator = text_list.iterator(); text_iterator.hasNext();) {
            org.dom4j.Element text_element = (org.dom4j.Element) text_iterator.next();
            text_type = text_element.elementText("TEXT_TYPE");
            text_value = text_element.elementText("TEXT_VALUE");
            font_class = text_element.elementText("FONT_CLASS");
            if("信息安全责任承诺书".equals(text_value)){//当是“信息安全责任承诺书”的时候，换页
                document.newPage();
            }
            if("1".equals(text_type)){
                if ("charges_info".equals(text_value)){//当是资费信息的时候插入表格：
                    Table chargesInfoTable = addTable((List<SeContractChargesInfo>) dataMap.get("charges_info"),pro_type);
                    document.add(chargesInfoTable);
                    text_value="";
                }else{
                    text_value=(String) dataMap.get(text_value);
                    String text_value_prefix = text_element.elementText("TEXT_VALUE_PREFIX");
                    String text_value_suffix = text_element.elementText("TEXT_VALUE_SUFFIX");
                    if(null==text_value_prefix){text_value_prefix=" ";}
                    if(null==text_value){text_value=" ";}
                    if(null==text_value_suffix){text_value_suffix=" ";}
                    text_value=text_value_prefix+text_value+text_value_suffix;
                }
            }
            paragraph.add(new Phrase(text_value, getFont(font_class)));
            if(font_class.equals("titleFont")){
                paragraph.setLeading(25f);
            }
        }
        return paragraph;
    }
    /**
     *
     * Create on 2018-1-3
     * @author: th
     * @Title:addTable
     * @Description: 写入资费表格信息
     * @param chargeInfoDtoList
     * @return Table
     * @version 1.0
     * Copyright(c) 北京思特奇信息技术股份有限公司
     * update_data:       update_author:       update_note:
     */
    private Table addTable(List<SeContractChargesInfo> chargeInfoDtoList ,String pro_type) throws Exception{

        Table table = new Table(4,chargeInfoDtoList.size()+1);
        table.setWidth(100);
        int width[] = {2,1,1,1};
        table.setWidths(width);

        String head1="价格";
        String head2="内容";
        String head3="数量";
        String head4="备注";
        if ("2".equals(pro_type)){
            head1="单价";
            head2="带宽";
            head3="数量";
            head4="计费周期";
        }
        //创建表头
        Cell cell1=  new Cell(new Phrase(head1,getFont("contextFont")));
        cell1.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
        cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
        table.addCell(cell1);

        Cell cell2=  new Cell(new Phrase(head2,getFont("contextFont")));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
        cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
        table.addCell(cell2);

        Cell cell3=  new Cell(new Phrase(head3,getFont("contextFont")));
        cell3.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
        cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
        table.addCell(cell3);

        Cell cell4=  new Cell(new Phrase(head4,getFont("contextFont")));
        cell4.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
        cell4.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
        table.addCell(cell4);

        for (SeContractChargesInfo productChargeInfoDto : chargeInfoDtoList){
            Cell cell5 = new Cell(new Phrase(productChargeInfoDto.getPrice(),getFont("contextFont")));//资费描述
            cell5.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
            cell5.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
            table.addCell(cell5);

            Cell cell6 = new Cell(new Phrase(productChargeInfoDto.getContent(),getFont("contextFont")));//价格
            cell6.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
            cell6.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
            table.addCell(cell6);

            Cell cell7 = new Cell(new Phrase(productChargeInfoDto.getNumber(),getFont("contextFont")));//数量
            cell7.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
            cell7.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
            table.addCell(cell7);

            Cell cell8 = new Cell(new Phrase(productChargeInfoDto.getRemark(),getFont("contextFont")));//折扣
            cell8.setHorizontalAlignment(Element.ALIGN_CENTER);//水平对齐
            cell8.setVerticalAlignment(Element.ALIGN_MIDDLE);//垂直对齐
            table.addCell(cell8);
        }

        return table;
    }

}

