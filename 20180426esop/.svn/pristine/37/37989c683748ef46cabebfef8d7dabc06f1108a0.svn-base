package com.esop.cqDevelopment.elecPack.controller;

import com.esop.cqDevelopment.capitalManage.controller.CapitalInfoApplyRC;
import com.esop.cqDevelopment.elecPack.dto.*;
import com.esop.cqDevelopment.elecPack.service.OrderService;
import com.esop.cqDevelopment.elecPack.service.UnionContractService;
import com.esop.workflow.dto.orderDto.OrderStartDto;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.PrintWriter;
import java.util.HashMap;
import java.io.File;
import java.util.List;
import java.util.Map;

/**
 * Created by 缪毅 on 2017/12/9
 * 请求数据
 */
@RestController
public class OrderControllerRC {
    @Autowired
    OrderService orderService;
    @Value("${uploadFileService}")
    private String uploadFileService;
    @Value("${local_file_path}")
    private String local_path;
    @Autowired
    CapitalInfoApplyRC capitalInfoApplyRC;
    @Autowired
    UnionContractService contractService;

    private static Logger logger = LoggerFactory.getLogger(OrderService.class);

    /**
     * 输入模糊查询集团信息
     *
     * @return 集团列表
     */
    @RequestMapping(value = "selJtName")
    public List selJtName(OrderDto parameter, HttpServletRequest request) {
        List list = orderService.selJtList(parameter);
        return list;
    }

    /**
     * 根据集团编号查询合同列表
     *
     * @return合同编号列表
     */
    @RequestMapping(value = "selHtNo")
    public List selHtNoList(OrderDto parameter, HttpServletRequest request) {
        List list = orderService.selHtNoList(parameter);
        return list;
    }

    /**
     * 查询合同对应产品列表
     *
     * @param parameter
     * @param request
     * @return 产品列表
     */
    @RequestMapping(value = "selProList")
    public List selProList(OrderDto parameter, HttpServletRequest request) {
        List list = orderService.selProList(parameter);
        return list;
    }

    /**
     * 查询合同对应产品帐号列表
     *
     * @param parameter
     * @param request
     * @return 产品列表
     */
    @RequestMapping(value = "selAccountProList")
    public List selAccountProList(OrderDto parameter, HttpServletRequest request) {
        List list = orderService.selAccountProList(parameter);
        return list;
    }


    /**
     * 新增申请订单
     *
     * @return
     */
    @RequestMapping(value = "addApplyOrder")
    public Map addApplyOrder(OrderDto parameter, HttpServletRequest request) {
        Map map = new HashMap();
        try {
            String flag = orderService.addApplyOrder(parameter, request);
            if ("0".equals(flag)) {
                map.put("code", "0");
                map.put("msg", "提交订单成功");
            } else {
                map.put("code", "1");
                map.put("msg", "提交订单失败");
            }

        } catch (Exception e) {
            map.put("code", "1");
            map.put("msg", "新增订单失败");
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 修改成员管理申请订单
     *
     * @return
     */
    @RequestMapping(value = "applyOrderUpd")
    public Map updApplyOrder(OrderDto parameter, HttpServletRequest request) {
        Map map = new HashMap();
        try {
            String flag = orderService.updApplyOrder(parameter, request);
            if ("0".equals(flag)) {
                map.put("code", "0");
                map.put("msg", "提交订单成功");
            } else {
                map.put("code", "1");
                map.put("msg", "提交订单失败");
            }

        } catch (Exception e) {
            map.put("code", "1");
            map.put("msg", "提交订单失败");
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 修改集团产品变更申请订单
     *
     * @return
     */
    @RequestMapping(value = "updChangeGrpApplyOrder")
    public Map updChangeGrpApplyOrder(OrderDto parameter, HttpServletRequest request) {
        Map map = new HashMap();
        try {
            String flag = orderService.updChangeGrpApplyOrder(parameter, request);
            if ("0".equals(flag)) {
                map.put("code", "0");
                map.put("msg", "提交订单成功");
            } else {
                map.put("code", "1");
                map.put("msg", "提交订单失败");
            }

        } catch (Exception e) {
            map.put("code", "1");
            map.put("msg", "提交订单失败");
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 修改本地营销修改申请订单
     *
     * @return
     */
    @RequestMapping(value = "updChangeActivitiesDiscount")
    public Map updChangeActivitiesDiscount(OrderDto parameter, HttpServletRequest request) {
        Map map = new HashMap();
        try {
            String flag = orderService.updChangeActivitiesDiscount(parameter, request);
            if ("0".equals(flag)) {
                map.put("code", "0");
                map.put("msg", "提交订单成功");
            } else {
                map.put("code", "1");
                map.put("msg", "提交订单失败");
            }

        } catch (Exception e) {
            map.put("code", "1");
            map.put("msg", "提交订单失败");
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 新增属性变更订单
     *
     * @param parameter
     * @param request
     * @return
     */
    @RequestMapping(value = "addChangeGrpApplyOrder")
    public Map addChangeGrpApplyOrder(OrderDto parameter, HttpServletRequest request) {
        Map map = new HashMap();
        try {
            String flag = orderService.addChangeGrpApplyOrder(parameter, request);
            if ("0".equals(flag)) {
                map.put("code", "0");
                map.put("msg", "提交订单成功");
            } else {
                map.put("code", "1");
                map.put("msg", "提交订单失败");
            }

        } catch (Exception e) {
            map.put("code", "1");
            map.put("msg", "新增订单失败");
            e.printStackTrace();
        }
        return map;
    }


    /**
     * bossReqAddmem请求boss成员管理
     *
     * @param parameter
     * @param request
     */
    @RequestMapping(value = "bossReqMem")
    public void bossReqMem(OrderDto parameter, HttpServletRequest request) {
        orderService.bossReqMem(parameter);
    }

    /**
     * 成员变更查询详情
     *
     * @param parameter
     * @param request
     * @return
     */
    @RequestMapping(value = "selOrderDetail")
    public OrderDto selOrderDetail(OrderDto parameter, HttpServletRequest request) {
        return orderService.selApplyOrderDetail(parameter.getReqNum());
    }

    /**
     * 集团产品变更查看详情
     *
     * @param parameter
     * @param request
     * @return
     */
    @RequestMapping(value = "selChangeGrpOrderDetail")
    public OrderDto selChangeGrpOrderDetail(OrderDto parameter, HttpServletRequest request) {
        return orderService.selChangeGrpOrderDetail(parameter.getReqNum());
    }

    /**
     * 请求boss属性变更接口
     *
     * @param parameter
     * @param request
     */
    @RequestMapping(value = "bossReqChangeGrpSubsAtt")
    public void bossReqChangeGrpSubsAtt(OrderDto parameter, HttpServletRequest request) {
        orderService.bossReqChangeGrpSubsAtt(parameter);
    }

    /**
     * 获取分公司合同编号
     *
     * @return 重移集合+分公司拼音简称+年份+4位序号
     * @req {"id","123456"}
     */
    @RequestMapping(value = "getContractNo")
    public String getContractNo(String id) {
        String contractNo = orderService.getContractNo(id);
        return contractNo;
    }


    /**
     * 获取合同流水号
     *
     * @return CQMC+分公司编码（譬如城一CY）+年份+6位序号（如000001）
     * @req {"id","123456"}
     */
    @RequestMapping(value = "getContractSeq")
    public String getContractSeq(String id) {
        String contractNo = orderService.getContractSeq(id);
        return contractNo;
    }

    /**
     * 获取合同详情
     *
     * @param parameter
     * @param request
     * @return
     */
    @RequestMapping(value = "selContractDetail")
    public OrderDto selContractDetail(OrderDto parameter, HttpServletRequest request) {
        return orderService.selContractDetail(parameter);
    }

    /**
     * 查询产品是否超量
     *
     * @param parameter
     * @param request
     * @return
     */
    @RequestMapping(value = "selIsCl")
    public Map selIsCl(OrderDto parameter, HttpServletRequest request) {
        return orderService.selIsCl(parameter.getProId());
    }

    /**
     * 新增本地营销活动订单
     *
     * @param parameter
     * @param request
     * @return
     */
    @RequestMapping(value = "addActivitiesDiscountOrder")
    public Map addActivitiesDiscountOrder(OrderDto parameter, HttpServletRequest request) {
        Map map = new HashMap();
        try {
            String flag = orderService.addActivitiesDiscountOrder(parameter, request);
            if ("0".equals(flag)) {
                map.put("code", "0");
                map.put("msg", "提交订单成功");
            } else {
                map.put("code", "1");
                map.put("msg", "提交订单失败");
            }

        } catch (Exception e) {
            map.put("code", "1");
            map.put("msg", "新增订单失败");
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 调用boss请求本地营销活动优惠充值
     *
     * @param parameter
     * @param request
     */
    @RequestMapping(value = "bossReqActivitiesDiscount")
    public void bossReqActivitiesDiscount(OrderDto parameter, HttpServletRequest request) {
        orderService.bossReqActivitiesDiscount(parameter);
    }

    /**
     * 文件上传
     *
     * @param file
     * @param request
     * @param response
     * @return
     */
     @RequestMapping(value = "uploadFile")
    public void uploadFile(@RequestParam("file") MultipartFile file, HttpServletRequest request, HttpServletResponse response) {
        String result = "1|上传文件失败";
        try{
            result = orderService.uploadFile2(file);
        }catch(Exception e){
            e.printStackTrace();
        }
        logger.info("return ==== " + result);
        orderService.sendMsg(response,result);
    }
    /**
     * 删除文件  add by liweijun
     * @param file
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "deleteUploadFile")
    public Map deleteUploadFile(String file, HttpServletRequest request, HttpServletResponse response) {

        Map map = null;
        try
        {
            map = orderService.deleteObject(file);
        }
        catch(Exception e)
        {
            map.put("code","1");
            map.put("msg","删除文件失败");

        }
      return map;
    }


    /**
     * 文件下载
     *
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "downloadFile")
    public void downloadFile(HttpServletRequest request, HttpServletResponse response) {
        String attach_file_id = request.getParameter("attach_file_id");
        orderService.downloadFile(attach_file_id, response);
    }

    /**
     * 获取资费折扣信息
     *
     * @param chargeId
     * @param request
     * @return
     */
    @RequestMapping(value = "getZkList")
    public List getZkList(String chargeId, HttpServletRequest request) {
        List list = orderService.getZkList(chargeId);
        return list;
    }

    /**
     * 文件上传
     *
     * @param file
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value = "uploadFileCapital")
    public void uploadFileCapital(@RequestParam("file") MultipartFile file, HttpServletRequest request, HttpServletResponse response) {
        String returnMsg = "1|上传文件失败";

        try {
            Map map = new HashMap();
            Map mapObj = new HashMap();
            Map mapFile = new HashMap();
            map.put("code","1");
            map.put("msg","上传文件失败");


            String ind_type = request.getParameter("ind_type");
            logger.info("******************** 缴费类型："+ind_type);
            String mid_name = "";
            if(ind_type.equals("1")){
                mid_name = "GrpFundGMCharge";
            }else{
                mid_name = "GrpFundLMCharge";
            }
            if (!file.isEmpty()) {
                //对象存储
                mapObj = orderService.uploadFile(file);
                logger.info("******************** 对象存储返回值："+mapObj.get("code"));

                //上传主机
                if(mapObj.get("code").equals("0")){
                    String newFileName = String.valueOf(mapObj.get("newFileName"));
                    String[] fname = newFileName.split("[.]");
                    newFileName = fname[0]+mid_name+"."+fname[1];

                    logger.info("******************** 文件名称："+newFileName);
                    // 文件保存路径
                    //String filePath = request.getSession().getServletContext().getRealPath("/") + "upload\\" + newFileName;
                    String filePath = local_path + newFileName;
                    logger.info("******************** 文件路径："+filePath);
                    // 转存文件
                    file.transferTo(new File(filePath));
                    returnMsg = "0|上传文件成功|"+mapObj.get("attach_file_id")+"|"+newFileName;

                    //读取文件内容
                    mapFile = capitalInfoApplyRC.dealTxtFileApplySumMoney(filePath);
                    if(mapFile.get("code").equals("0")){
                        returnMsg += "|" + mapFile.get("sumMoney") + "|" + mapFile.get("num");
                    }else{
                        returnMsg = "3|" + mapFile.get("errMsg") + "|" + mapFile.get("phoneNum");
                    }

                }else if(mapObj.get("code").equals("2")) {
                    returnMsg = "2|上传文件失败,文件格式错误";
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        logger.info("return ==== " + returnMsg);
        orderService.sendMsg(response,returnMsg);
    }

    /**
     * 集团产品开户初始化
     *
     * @param querydto
     * @return
     */
    @RequestMapping("/openGroupProdNewInit")
    public Map openGroupProdNewInit(SeNewContractInfoDto querydto) {
        String contrcat_id = querydto.getContract_id();
        Map resmap = new HashMap();
        SeNewContractInfoDto contractInfoDto = contractService.getOneSeNewContractInfo(contrcat_id);//合同信息
        resmap.put("contractInfoDto", contractInfoDto);
        SeContractChargesInfo reqcharges = new SeContractChargesInfo();
        reqcharges.setContract_id(contrcat_id);
        List<SeContractChargesInfo> chargesInfos = contractService.selectProdList(reqcharges);
        resmap.put("chargesInfos", chargesInfos);
        return resmap;
    }


    /**
     * 更新集团产品开户初始化
     *
     * @param querydto
     * @return
     */
    @RequestMapping("/chargeGroupProdNewInit")
    public Map chargeGroupProdNewInit(SeNewContractInfoDto querydto) {
        String contrcat_id = querydto.getContract_id();
        Map resmap = new HashMap();
        SeNewContractInfoDto contractInfoDto = contractService.getOneSeNewContractInfo(contrcat_id);//合同信息
        resmap.put("contractInfoDto", contractInfoDto);

        //帐号列表
        List<SelectDto> selectDtos = orderService.selectDtos(contrcat_id);
        resmap.put("selectDtos", selectDtos);
        return resmap;
    }

    /**
     * 发起集团产品开户
     */
    @RequestMapping("/openGroupProdNewSave")
    public String openGroupProdNewSave(OrRequestinstInfoDto instDto, SeNewContractInfoDto contractdto, HttpServletRequest request) {
        return orderService.openGroupProdNewSave(instDto,contractdto,request);
    }

    /**
     * 发起集团产品变更
     */
    @RequestMapping("/chargeGroupProdNewSave")
    public String chargeGroupProdNewSave(OrRequestinstInfoDto instDto, SeNewContractInfoDto contractdto, HttpServletRequest request) {
        return orderService.chargeGroupProdNewSave(instDto,contractdto);
    }

    /**
     * 获取产品附加属性
     * @param prod_id
     * @param request
     * @return
     */
    @RequestMapping("/selPrivAttrList")
    public List selPrivAttrList(String prod_id, HttpServletRequest request){
       return orderService.selPrivAttrList(prod_id);
    }

    /**
     * 订单中心创建订单返回
     * @param msg
     * @return
     */
    @RequestMapping("/doCreateOrderRsp")
    public String doCreateOrderRsp(@RequestBody String msg){
        return orderService.doCreateOrderRsp(msg);
    }

    /**
     * 查询帐号信息
     * @param grpSubsids
     * @return
     */
    @RequestMapping("/selGrpSubSidsDetail")
    public Map selGrpSubSidsDetail(String grpSubsids){
        return orderService.selGrpSubSidsDetail(grpSubsids);
    }
}
