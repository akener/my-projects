package com.esop.workbench.controller;

/**
 * Created by dinghl on 2017/6/27.
 */

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class IntegrationDESPlus
{


    private static final String ALGORITHM = "DES";
    private static SecretKey secretKey = null;
    //private  String  = keyFilePath;


    public IntegrationDESPlus(String KeyFilePath,String esop)
    {

        loadSecretKey(true, KeyFilePath);
    }

//    public IntegrationDESPlus(String kf) {
//        setKeyFile(kf);
//        loadSecretKey(true, KeyFilePath);
//    }
//
//    public String getKeyFile() {
//        return KeyFilePath;
//    }
//
//    public void setKeyFile(String kf) {
//        if (("".equals(kf)) || (kf == null))
//            return;
//        KeyFilePath = kf;
//    }

//    public static void main(String[] args)
//    {
//        IntegrationDESPlus sd = new IntegrationDESPlus();
//        System.out.println(SystemUtils.getConfigByFile("KeyFilePath"));
//
//        String enc_result = sd.encrypt("111111");
//        System.out.println("351 encrypt result=" + enc_result);
//
//        String dec_result = sd.decrypt(enc_result);
//        System.out.println("351 decrypt result=" + dec_result);
//    }

    public String encrypt(String source)
    {
        String result = null;
        try
        {
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(1, secretKey);
            byte[] cipherByte = cipher.doFinal(source.getBytes());

            result = byte2hex(cipherByte);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return result;
    }

    public String decrypt(String source)
    {
        String result = null;
        try
        {
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(2, secretKey);

            byte[] clearByte = cipher.doFinal(hex2byte(source));
            result = new String(clearByte);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return result;
    }

    private void loadSecretKey(boolean local, String SERVERKEY)
    {
        File f;
        try
        {
            f = new File(".");
            InputStream inStream = new FileInputStream(SERVERKEY);
            ObjectInputStream is = new ObjectInputStream(inStream);
            secretKey = (SecretKey)is.readObject();
            is.close();
        } catch (NullPointerException e) {
            StringBuffer msg = new StringBuffer();
            msg.append("Secret Key file can not be found, so: \r\n");
            msg.append("1: find and install the corresponding");
            msg.append(" keyFile.\r\n");
            msg.append("2: generate a new key file, encrypt the ");
            msg.append("password and set the configuration file ");
            msg.append("again. \r\n");
            System.out.println(msg.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String byte2hex(byte[] bytes)
    {
        String result = "";
        String temp = "";
        for (int i = 0; i < bytes.length; ++i) {
            temp = Integer.toHexString(bytes[i] & 0xFF);
            if (temp.length() == 1)
                result = result + "0" + temp;
            else
                result = result + temp;

        }

        return result.toUpperCase();
    }

    private byte[] hex2byte(String hex)
    {
        char[] arr = hex.toCharArray();
        byte[] b = new byte[hex.length() / 2];
        int i = 0; int j = 0; for (int l = hex.length(); i < l; ) {
        String swap = ""+arr[(i++)] + arr[i];
        int byteint = Integer.parseInt(swap, 16) & 0xFF;
        b[j] = new Integer(byteint).byteValue();

        ++i; ++j;
    }

        return b;
    }

    public void generateKey(String fileName)
    {
        File keyFile;
        try
        {
            keyFile = new File(fileName);
            if (!(keyFile.exists())) {
                KeyGenerator keygen = KeyGenerator.getInstance("DES");
                SecretKey secretKey = keygen.generateKey();
                ObjectOutputStream os = new ObjectOutputStream(
                        new BufferedOutputStream(
                                new FileOutputStream(keyFile)));
                os.writeObject(secretKey);
                os.flush(); os.close();
            }
            else System.out.println("Secret Key file has exist.");
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
}
