package com.esop.common.word;

import com.lowagie.text.*;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.*;

import java.awt.*;
import java.io.IOException;

/**
 * Created by th on 2017/11/27.
 */
/*
继承PdfPageEventHelper,写入生成水印方法，写入获取总页数，并生成页脚
通过writer.setPageEvent(new TextWaterMarkPdfPageEvent());把该类添加进去，之后每次调用newpage的时候都会执行该类中的方法。
 */
public class TextWaterMarkPdfPageEvent extends PdfPageEventHelper{
    /**
     * 页眉
     */
    public String header = "";
    /**
     * 文档字体大小，页脚页眉最好和文本大小一致
     */
    public int presentFontSize = 12;
    /**
     * 文档页面大小，最好前面传入，否则默认为A4纸张
     */
    public Rectangle pageSize = PageSize.A4;
    // 模板
    public PdfTemplate total;
    // 基础字体对象
    public BaseFont bf = null;
    // 利用基础字体生成的字体对象，一般用于生成中文文字
    public Font fontDetail = null;
    private String imgPath;

    public TextWaterMarkPdfPageEvent(String imgPath) {
        this.imgPath = imgPath;
    }

    /**
     *
     * Creates a new instance of PdfReportM1HeaderFooter 构造方法.
     *
     * @param yeMei
     *            页眉字符串
     * @param presentFontSize
     *            数据体字体大小
     * @param pageSize
     *            页面文档大小，A4，A5，A6横转翻转等Rectangle对象
     */
    public void PdfReportM1HeaderFooter(String yeMei, int presentFontSize, Rectangle pageSize) {
        this.header = yeMei;
        this.presentFontSize = presentFontSize;
        this.pageSize = pageSize;
    }

    public void setHeader(String header) {
        this.header = header;
    }

    public void setPresentFontSize(int presentFontSize) {
        this.presentFontSize = presentFontSize;
    }

    /**
     *
     * TODO 文档打开时创建模板
     *
     * ee com.itextpdf.text.pdf.PdfPageEventHelper#onOpenDocument(com.itextpdf.text.pdf.PdfWriter, com.itextpdf.text.Document)
     */
    public void onOpenDocument(PdfWriter writer, Document document) {
        total = writer.getDirectContent().createTemplate(50, 50);// 共 页 的矩形的长宽高
    }

    public void onEndPage(PdfWriter writer, Document document)  {
        //写水印

        BaseFont bfChinese = null;
        try {
            bfChinese = BaseFont.createFont("STSong-Light",
                    "UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
        } catch (DocumentException e) {
        } catch (IOException e) {
            e.printStackTrace();
        }
        Font font = new Font(bfChinese);
        font.setSize(5);
        PdfContentByte under = writer.getDirectContentUnder();
        PdfGState gs = new PdfGState();
        gs.setFillOpacity(0.2f);// 设置透明度为0.2
        under.setGState(gs);
        //图片水印， 功能有问题，还不能实现
/*        try {
            Image image = Image.getInstance(imgPath);
            image.setAbsolutePosition(50, 400);//坐标
            image.setRotation(-20);//旋转 弧度
            image.setRotationDegrees(-45);//旋转 角度
//            image.scaleAbsolute(200,100);//自定义大小
            image.scalePercent(50);//依照比例缩放
            under.addImage(image);
        }catch (Exception e){
            e.printStackTrace();
        }*/

        under.beginText();
        under.setColorFill(Color.GRAY);
        under.setFontAndSize(bfChinese, 100);
        under.setTextMatrix(70, 0);
        String waterMarkName = "重庆移动";

        int rise = 200;
        for (int k = 0; k < waterMarkName.length(); k++) {
            under.setTextRise(rise);
            char c = waterMarkName.charAt(k);
            under.showText(c + " ");
            rise += 100;
        }
        under.endText();




        //写页脚（需要获取总页数）


        try {
            if (bf == null) {
                bf = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H", false);
            }
            if (fontDetail == null) {
                fontDetail = new Font(bf, presentFontSize, Font.NORMAL);// 数据体字体
            }
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }


        // 2.写入前半部分的 第 X页/共
        int pageS = writer.getPageNumber();
        String foot1 = "第 " + pageS + " 页 /共";
        Phrase footer = new Phrase(foot1, fontDetail);

        // 3.计算前半部分的foot1的长度，后面好定位最后一部分的'Y页'这俩字的x轴坐标，字体长度也要计算进去 = len
        float len = bf.getWidthPoint(foot1, presentFontSize);

        // 4.拿到当前的PdfContentByte
        PdfContentByte cb = writer.getDirectContent();

        // 5.写入页脚1，x轴就是(右margin+左margin + right() -left()- len)/2.0F 再给偏移20F适合人类视觉感受，否则肉眼看上去就太偏左了 ,y轴就是底边界-20,否则就贴边重叠到数据体里了就不是页脚了；注意Y轴是从下往上累加的，最上方的Top值是大于Bottom好几百开外的。
        ColumnText.showTextAligned(cb, Element.ALIGN_CENTER, footer, (document.rightMargin() + document.right() + document.leftMargin() - document.left() - len) / 2.0F + 20F, document.bottom() - 20, 0);

        // 6.写入页脚2的模板（就是页脚的Y页这俩字）添加到文档中，计算模板的和Y轴,X=(右边界-左边界 - 前半部分的len值)/2.0F + len ， y 轴和之前的保持一致，底边界-20
        cb.addTemplate(total, (document.rightMargin() + document.right() + document.leftMargin() - document.left()) / 2.0F + 20F, document.bottom() - 20); // 调节模版显示的位置






    }



    public void onCloseDocument(PdfWriter writer, Document document) {
        // 7.最后一步了，就是关闭文档的时候，将模板替换成实际的 Y 值,至此，page x of y 制作完毕，完美兼容各种文档size。
        total.beginText();
        total.setFontAndSize(bf, presentFontSize);// 生成的模版的字体、颜色
        String foot2 = " " + (writer.getPageNumber() - 1) + " 页";
        total.showText(foot2);// 模版显示的内容
        total.endText();
        total.closePath();
    }
}
