package com.esop.Interface.controller;

import com.esop.common.util.ParameterConversion;
import com.esop.cust.dto.SendMesageDto;
import okhttp3.*;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.security.MessageDigest;
import java.util.*;

/**
 * Created by lubinghan on 2017/7/29.
 * 用于调用接口向客户侧推送消息
 */
@RestController
public class SendCustSvrMsgController {
    @Autowired
    private static Logger logger = Logger.getLogger(SendCustSvrMsgController.class);

    public static String mapSign(Map<String, String> map, String secretKey) {
        StringBuffer sb = new StringBuffer();
        map = sortMapByKey(map);
        map.put("secretKey", secretKey);
        Iterator iter = map.entrySet().iterator();
        while (iter.hasNext()) {
            Map.Entry<String, String> entry = (Map.Entry<String, String>) iter.next();
            Object val = entry.getValue();
            sb.append(val);
        }

        return string2MD5(sb.toString());
    }
    //对map  进行排序
    public static Map<String, String> sortMapByKey(Map<String, String> map) {
        if (map == null || map.isEmpty()) {
            return null;
        }
        Map<String, String> sortMap = new TreeMap<String, String>(new MapKeyComparator());
        sortMap.putAll(map);

        return sortMap;
    }
    //加密
    public static String string2MD5(String inStr) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (Exception e) {
            System.out.println(e.toString());
            e.printStackTrace();
            return "";
        }
        char[] charArray = inStr.toCharArray();
        byte[] byteArray = new byte[charArray.length];

        for (int i = 0; i < charArray.length; i++)
            byteArray[i] = (byte) charArray[i];
        byte[] md5Bytes = md5.digest(byteArray);
        StringBuffer hexValue = new StringBuffer();
        for (int i = 0; i < md5Bytes.length; i++) {
            int val = ((int) md5Bytes[i]) & 0xff;
            if (val < 16)
                hexValue.append("0");
            hexValue.append(Integer.toHexString(val));
        }
        return hexValue.toString();
    }

    @RequestMapping(value = "/sendPostMesage")
    public String sendPostMesage(HttpServletRequest request){
        SendMesageDto param = ParameterConversion.jsonToObject(request,SendMesageDto.class);

        System.out.println(param.getTel()+"=:1"+param.getMsg()+"=:2"+param.getAnswerTime()+"=:3"+param.getAppType()+"=:4");
        System.out.println();
        System.out.println();
        System.out.println();
        System.out.println(param.getLoginNo()+"=:5");
        OkHttpClient client = new OkHttpClient();
        String returnMsg = "";

        Map<String,String> map = new TreeMap<String,String>();
        map.put("tel",param.getTel());
        map.put("msg",param.getMsg());
        Map<String,String> resultMap = sortMapByKey(map);

       String sign = mapSign(resultMap,"ydshqjd");
        try {
            RequestBody body = new FormBody.Builder()
                    .add("tel", param.getTel())
                    .add("answerTime", param.getAnswerTime())
                    .add("msg", param.getMsg())
                    .add("appType", param.getAppType())
                    .add("loginNo", param.getLoginNo())
                    .add("result", sign)
                    .build();
            Request okrequest = new Request.Builder()
                    .url("http://218.203.13.57:9007/hlj_app_v3/u322/answerMsg.do")
                    .post(body)
                    .build();
            Response okresponse = client.newCall(okrequest).execute();
            returnMsg = okresponse.body().string();//获取返回的信息
            System.out.println("返回信息=" + returnMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return returnMsg;
    }
}


