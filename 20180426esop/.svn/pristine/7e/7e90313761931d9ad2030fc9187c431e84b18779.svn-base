package com.esop.invoice.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.esop.basicManagement.dto.BasicFunctionDealDto;
import com.esop.common.dataBase.SqlE;
import com.esop.common.page.Result;
import com.esop.cqDevelopment.controller.CQBOSSRESTFulClient;
import com.esop.invoice.dto.*;
import com.esop.invoice.mapper.*;
import com.esop.invoice.model.*;
import com.esop.invoice.vo.InvApprListVo;
import com.esop.workflow.exception.BpmException;
import com.esop.workflow.model.CtProcInstInfo;
import com.esop.workflow.model.CtTaskInstInfo;
import com.esop.workflow.service.WorkFlowService;
import com.esop.workflow.util.ExportExcelUtil;
import com.esop.workflow.util.ReadExcel;
import com.esop.workflow.vo.Param;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

@Service
public class PrePrintInvoiceService {
    private static final Logger logger = LogManager.getLogger(PrePrintInvoiceService.class);
    @Autowired
    private EpInvPreprintAppInfoMapper epInvPreprintAppInfoMapper;
    @Autowired
    private EpInvPreprintActInfoMapper epInvPreprintActInfoMapper;
    @Autowired
    private EpInvRedPartInfoMapper epInvRedPartInfoMapper;
    @Autowired
    private EpFundInvoiceAttachRelMapper epFundInvoiceAttachRelMapper;
    @Autowired
    protected SqlSessionTemplate sqlSessionTemplate;
    @Autowired
    private WorkFlowService workFlowService;
    @Autowired
    private CQBOSSRESTFulClient cqbossrestFulClient;

    @Autowired
    SqlE sqlE;

    @Value("${invoice_ftp_file_path}")
    private String invoice_ftp_file_path;
    /**
     * 预打发票申请
     *
     * @param appInfo        预打发票申请信息
     * @param actInfos       预打发票申请集团账号列表
     * @param ctProcInstInfo 流程实例
     * @param params         流程实例参数
     */
    @Transactional
    public String preprtInvApp(EpInvPreprintAppInfo appInfo, List<EpInvPreprintActInfo> actInfos, List<EpInvRedPartInfo> redPartInfos, CtProcInstInfo ctProcInstInfo, Param[] params, List<EpFundInvoiceAttachRel> attachRels,String invoiceType) {
        String flag="0";
        String procInstId = null;
        try {
            procInstId = workFlowService.startProcInst(ctProcInstInfo, params, null);
            logger.info("【插入预打发票申请信息】" + appInfo);
            epInvPreprintAppInfoMapper.insert(appInfo);
            if (actInfos != null) {
                for (EpInvPreprintActInfo actInfo : actInfos) {
                    logger.info("【插入预打发票集团账户信息】" + actInfo);
                    epInvPreprintActInfoMapper.insert(actInfo);
                }
            }
            if (redPartInfos != null && redPartInfos.size() > 0) {
                for (EpInvRedPartInfo redPartInfo : redPartInfos) {
                    logger.info("【插入发票冲红发票信息】" + redPartInfo);
                    epInvRedPartInfoMapper.insert(redPartInfo);
                }
            }
            if (attachRels != null && attachRels.size() > 0) {
                for (EpFundInvoiceAttachRel attachRel : attachRels) {
                    epFundInvoiceAttachRelMapper.insert(attachRel);
                }
            }

            //判断是否为合打，合打需要生成账户信息接口文件
            if("2".equals(appInfo.getPrintMode())&&"2".equals(appInfo.getIsRed()))
            {
                String type="";
                //多账号实收电子发票合打
                if("1".equals(appInfo.getInvoiceMode()) && "1".equals(invoiceType))
                {
                    type="GrpPayEleInvUniPrt";

                }
                //多账号单账期电子发票合打
                else if("2".equals(appInfo.getInvoiceMode()) && "1".equals(invoiceType))
                {
                    type="GrpEleInvUniPrt";
                }
                //多账户单账期专票合打
                else if("2".equals(appInfo.getInvoiceMode()) && "2".equals(invoiceType))
                {
                    type="GrpTaxInvUniPrt";
                }
                creatMultiAccountFile(actInfos,type,appInfo.getGroupId());
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (procInstId != null && !"-1".equals(procInstId)) {
                workFlowService.stopProcInst(procInstId);
            }

            throw new BpmException("启动流程实例异常", e);
        }
        return flag;
    }

    /**
     * 查询预打发票审批列表
     *
     * @param inDTO 入参dto
     * @return 预打发票审批列表
     */
    public List<InvApprListVo> qryInvApprList(QryInvApprListInDTO inDTO) {
        return epInvPreprintAppInfoMapper.selectInvApprList(inDTO);
    }

    /**
     * 查询预打发票申请信息
     *
     * @param appNo 申请单编号
     * @return 预打发票申请信息
     */
    public EpInvPreprintAppInfo qryInvAppInfo(String appNo) {
        return epInvPreprintAppInfoMapper.selectByAppNo(appNo);
    }

    /**
     * 查询预打发票申请信息（用于冲红查询基本信息）
     *
     * @param applicationNo 申请单编号
     * @return
     */
    public EpInvPreprintAppInfo qryInvAppInfoForRed(EpInvPreprintAppInfo applicationNo) {
        return epInvPreprintAppInfoMapper.selectForRed(applicationNo);
    }

    /**
     * 查询预打发票申请集团账户列表
     *
     * @param appNo 申请单编号
     * @return
     */
    public List<EpInvPreprintActInfo> qryInvActInfos(String appNo) {
        return epInvPreprintActInfoMapper.selectByAppNo(appNo);
    }

    /**
     * 预打发票流程审批
     *
     * @param ctTaskInstInfo 任务实例
     * @param params         流程实例参数
     */
    @Transactional
    public String preprtInvAppr(CtTaskInstInfo ctTaskInstInfo, Param[] params) {
        String isPass_1 = "";
        String audiLevel = "";
        String isPass_2 = "";
        //增加请求接口返回信息,默认成功
        JSONObject resmsg=new JSONObject();
        resmsg.put("returnCode","0");
        resmsg.put("returnMsg","操作成功");
        for (Param param : params) {
            switch (param.getKey()) {
                case "isPass_1":
                    isPass_1 = param.getValue();
                    break;
                case "isPass_2":
                    isPass_2 = param.getValue();
                    break;
                case "audiLevel":
                    audiLevel = param.getValue();
                    break;
                default:
            }
        }
        if ("0".equals(isPass_1) || "0".equals(isPass_2)) { //被驳回，更新工单状态，流程结束
            EpInvPreprintAppInfo appInfo = new EpInvPreprintAppInfo();
            appInfo.setApplicationNo(ctTaskInstInfo.getBizRecordId());
            appInfo.setWorkState("0");//驳回
            epInvPreprintAppInfoMapper.updateWorkState(appInfo);
        } else if (("1".equals(isPass_1) && "0".equals(audiLevel)) || "1".equals(isPass_2)) { //审批最终通过，更新工单状态，流程结束
            EpInvPreprintAppInfo appInfo = new EpInvPreprintAppInfo();
            appInfo.setApplicationNo(ctTaskInstInfo.getBizRecordId());
            appInfo.setWorkState("2");//待开票
//            epInvPreprintAppInfoMapper.updateWorkState(appInfo);

            EpInvPreprintAppInfo invAppInfo = qryInvAppInfo(ctTaskInstInfo.getBizRecordId());
            List<EpInvPreprintActInfo> actInfos = qryInvActInfos(ctTaskInstInfo.getBizRecordId());
            String invoiceMode = invAppInfo.getInvoiceMode();//发票模式（1-实收、2-月结）
            String invoiceType = invAppInfo.getInvoiceType();//发票类型（1-增值税电子发票、2-增值税专用发票）
            String printMode = invAppInfo.getPrintMode();//打印方式（1-一般、2-合打、3-分打）

            DateFormat dateFormat = new SimpleDateFormat("yyyyMM");
            EpInvPreprintActInfo actInfo = actInfos.get(0);
            String pRecType = "";//业务类型
            String isSend = "";
            if("1".equals(printMode)){
                if ("1".equals(invoiceMode) && "1".equals(invoiceType)) {
                    pRecType = "GrpFundEleInvoicePrint";
                    isSend = "1";
                } else if ("2".equals(invoiceMode) && "1".equals(invoiceType)) {
                    pRecType = "GrpFundMonthEleInvoicePrint";
                    isSend = "1";
                } else if ("1".equals(invoiceMode) && "2".equals(invoiceType)) {
                    pRecType = "GrpFundSpecialInvoicePrint";
                    isSend = "0";
                } else if ("2".equals(invoiceMode) && "2".equals(invoiceType)) {
                    pRecType = "GrpFundSpecialMonInvoicePrint";
                    isSend = "0";
                }
            }else if ("2".equals(printMode)){
                //多账号实收电子发票合打
                if("1".equals(invoiceMode) && "1".equals(invoiceType))
                {
                    pRecType="GrpPayEleInvUniPrt";
                    isSend = "1";
                }
                //多账号单账期电子发票合打
                else if("2".equals(invoiceMode) && "1".equals(invoiceType))
                {
                    pRecType="GrpEleInvUniPrt";
                    isSend = "1";
                }
                //多账户单账期专票合打
                else if("2".equals(invoiceMode) && "2".equals(invoiceType))
                {
                    pRecType="GrpTaxInvUniPrt";
                    isSend = "0";
                }
            }else if ("3".equals(printMode)){
                pRecType="GrpEleInvPartPrt";
                isSend = "1";
            }
            if(invAppInfo.getPushEmail()==null||"".equals(invAppInfo.getPushEmail())){
                isSend = "0";//没填写缴费联系人信息，则不推送
            }
            //调用boss接口进行工单信息同步
            String url = "UserOrderService";
            String method = "grpFundAccountUseFlowINVOICE";
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("ORDERID", invAppInfo.getApplicationNo()); //ESOP工单号码
            jsonObject.put("RECTYPE", pRecType); //业务类型：GrpFundEleInvoicePrint 实收电子发票
            //          GrpFundMonthEleInvoicePrint 月结电子发票
            //          GrpFundSpecialInvoicePrint 实收专用发票
            //          GrpFundSpecialMonInvoicePrint 月结专用发票
            // jsonObject.put("AREAID", invAppInfo.getBranchNo()); //分公司编码
            jsonObject.put("AREAID", invAppInfo.getBranchNo()); //分公司编码
            jsonObject.put("APPLYOPID", invAppInfo.getApplicantBossNo()); //申请人ID，这里取BOSS工号
            jsonObject.put("TRADECENTERID", invAppInfo.getIndustryCenterName()); //行业中心
            jsonObject.put("GROUPID", invAppInfo.getGroupId()); //集团编码
            //增加合打、分打逻辑
            if("2".equals(printMode))
                jsonObject.put("GROUPACCTID", "0"); //集团账号
            else
                jsonObject.put("GROUPACCTID", actInfo.getGroupAccountId()); //集团账号


            jsonObject.put("INVTYPE", "1".equals(invAppInfo.getInvoiceType()) ? "2" : "1"); //开票类型：专票/普通电子发票
            jsonObject.put("BEGINCYCLE", invAppInfo.getStartAccountPeriod() == null ? "" : dateFormat.format(invAppInfo.getStartAccountPeriod())); //开票账期（开始）
            jsonObject.put("ENDCYCLE", invAppInfo.getEndAccountPeriod() == null ? "" : dateFormat.format(invAppInfo.getEndAccountPeriod())); //开票账期（结束）
            jsonObject.put("INVOICEITEMNAME", "1".equals(invoiceMode) ? "本次实收" : ""); //开票项目名称
            jsonObject.put("INVOICEFEE", String.valueOf(invAppInfo.getInvoiceSumValue().multiply(new BigDecimal(100)).intValue())); //开票金额
            jsonObject.put("INVOICERATE", "2"); //开票项目税率
            jsonObject.put("INVOICECASHERID", invAppInfo.getApplicantBossNo()); //收款人编号
            jsonObject.put("INVOICECASHERNAME", invAppInfo.getApplicantName()); //收款人姓名
            jsonObject.put("INVOICEOPID", invAppInfo.getOpennerId()== null ? invAppInfo.getApplicantBossNo() : invAppInfo.getOpennerId()); //开票人编号
            jsonObject.put("INVOICEOPNAME", invAppInfo.getOpennerName()== null ? invAppInfo.getApplicantName() :invAppInfo.getOpennerName()); //开票人姓名
            jsonObject.put("INVOICECHECKOPID", invAppInfo.getReviewerId()== null ? invAppInfo.getApplicantBossNo() :invAppInfo.getReviewerId()); //审核人编号
            jsonObject.put("INVOICECHECKOPNAME", invAppInfo.getReviewerName()== null ? invAppInfo.getApplicantName() :invAppInfo.getReviewerName()); //审核人姓名
            jsonObject.put("ISSEND", isSend); //是否推送1-推送；0-不推送
            jsonObject.put("SENDTYPE", "1"); //推送方式1-邮件；2-短信
            jsonObject.put("EMAILORTEL", invAppInfo.getPushEmail()); //推送邮箱或电话
            String ISRED="";
            if("0".equals(invAppInfo.getIsRed())){
                ISRED="2";
            }else if("2".equals(invAppInfo.getIsRed())){
                ISRED="";
            }else{
                ISRED="1";
            }
            jsonObject.put("ISRED", ISRED); //是否红票
            jsonObject.put("INVOICENO", invAppInfo.getInvoiceNo() == null ? "" : invAppInfo.getInvoiceNo()); //如果是冲红，原发票号码
            jsonObject.put("ISUNIPRINT", "3".equals(invAppInfo.getPrintMode()) ? "0" : "1"); //发票合打标记1-合打；0-分打
            jsonObject.put("ISPARTRED", "0"); //是否部分冲红，ISRED=1时有效：1-部分冲红；0-全部冲红
            jsonObject.put("OLDORDERID", invAppInfo.getOriginalApplicationNo() == null ? "" : invAppInfo.getOriginalApplicationNo()); //原工单编号，ISRED=1时有效
            //增加合打、分打逻辑
            if("2".equals(printMode)&&"2".equals(invAppInfo.getIsRed()))
                jsonObject.put("FILENAME", pRecType+invAppInfo.getApplicationNo()+".DAT"); //合打的账号列表文件名
            else
                jsonObject.put("FILENAME", ""); //合打的账号列表文件名
//            jsonObject.put("ITEMPROPERTY", ""); //打印项目属性
            jsonObject.put("NOTE", invAppInfo.getOperRemarks() == null ? "" : invAppInfo.getOperRemarks()); //备注信息
            if("1".equals(invoiceType))
                jsonObject.put("INVNOTE", invAppInfo.getRemarks() == null ? "" : invAppInfo.getRemarks()); //发票备注(限制50个汉字)
            else
                jsonObject.put("INVNOTE", ""); //发票备注(限制50个汉字)
            //专票添加打印项目属性
            if("2".equals(invoiceType))
                jsonObject.put("ITEMPROPERTY", invAppInfo.getItemProperty() == null ? "" : invAppInfo.getItemProperty()); //专票添加打印项目属性
            else
                jsonObject.put("ITEMPROPERTY", ""); //专票添加打印项目属性


            String param = jsonObject.toString();
            String result = cqbossrestFulClient.postRest(url, method, param, 10000, 30000);
            //记录crm请求日志  并捕获异常以防阻碍正常提交
            try {
                saveCrmLog(invAppInfo.getApplicationNo(),url,method,param,result,ctTaskInstInfo.getOpPort()==""?"1":"0");
            }catch (Exception e){
                logger.error(e);
            }
            JSONObject resjson = JSON.parseObject(result);
            String rescode=resjson.getString("res_code");
            String resdesc=resjson.getString("res_desc");
            //增加请求接口返回信息,默认成功，请求失败停止提交流程
            if(!"0".equals(rescode)){
                resmsg.put("returnCode","1");
                resmsg.put("returnMsg",resdesc);
                return resmsg.toJSONString();
            }
            epInvPreprintAppInfoMapper.updateWorkState(appInfo);
        }

        workFlowService.submitTask(ctTaskInstInfo, params);
        return resmsg.toJSONString();
    }

    /**
     * 更新预打发票工单状态
     *
     * @param appInfo
     */
    public int updateWorkState(EpInvPreprintAppInfo appInfo) {
        return epInvPreprintAppInfoMapper.updateWorkState(appInfo);
    }

    /**
     * 电子发票实收开票 查询集团账户是否存在审批中、待开票、待回款的在途工单
     *
     * @param groupAccountId
     * @return 预打发票的审批中或待开票状态的申请单编号
     */
    public String qryIFSSGrpAcctCanApp(String groupAccountId) {
        String invalidAppNos = "";
        List<EpInvPreprintActInfo> actInfos = epInvPreprintActInfoMapper.selectForSSAppValid(groupAccountId);
        if (actInfos != null && actInfos.size() > 0) {
            for (EpInvPreprintActInfo actInfo : actInfos) {
                invalidAppNos += actInfo.getApplicationNo() + ",";
            }
            invalidAppNos = invalidAppNos.substring(0, invalidAppNos.length() - 1);
        }
        return invalidAppNos;
    }

    /**
     * 查询预打发票申请附件信息
     *
     * @param applicationNo 申请单编号
     * @return
     */
    public List<EpFundInvoiceAttachRel> qryInvAttachs(String applicationNo) {
        return epFundInvoiceAttachRelMapper.selectByAppNo(applicationNo);
    }

    public EpInvRedPartInfo selectForFundCheck(String invoiceNo){
        return epInvRedPartInfoMapper.selectForFundCheck(invoiceNo);
    }
    //通过集团账号查询在途的账期
    public List<String> selectAcctPeriod(EpInvPreprintActInfo acctid){
        List<EpInvPreprintAppInfo> epInvPreprintAppInfoList = epInvPreprintAppInfoMapper.selectAcctPeriod(acctid);
        List<String> list=new ArrayList<>();

        if(epInvPreprintAppInfoList!=null&&epInvPreprintAppInfoList.size()>0)
        {

            for (int i = 0; i < epInvPreprintAppInfoList.size(); i++) {

                EpInvPreprintAppInfo ep= epInvPreprintAppInfoList.get(i);
                List<String> app =getBetweenMonths(ep.getStartAccountPeriod(),ep.getEndAccountPeriod());
                list.addAll(app);
            }

        }
        return list;

    }
    //通过申请单号查询在途的冲红订单
    public EpInvPreprintAppInfo qryRedExistUnPrint(EpInvPreprintAppInfo appid){
        return epInvPreprintAppInfoMapper.qryRedExistUnPrint(appid);
    }
    //通过账号、账期查询在途的发票订单
    public List<EpInvPreprintAppInfo> qryHdAcctExistUnPrint(EpInvPreprintActInfo acct){
        return epInvPreprintAppInfoMapper.qryHdAcctExistUnPrint(acct);
    }
    /**
     * 记录调用boss记录日志
     * @param application_no 申请单编号
     * @param req_url 请求地址
     * @param req_method 请求方法
     * @param req_xml 请求报文
     * @param resp_xml 返回报文
     * @param op_port 来源 0 手机端 1 pc端
     */
    public void saveCrmLog(String application_no,String req_url,String req_method,String req_xml,String resp_xml,String op_port){
        Map param = new HashMap();
        param.put("applicationNo",application_no);
        param.put("reqUrl",req_url);
        param.put("reqMethod",req_method);
        param.put("reqXml",req_xml);
        param.put("respXml",resp_xml);
        param.put("opPort",op_port);
        sqlSessionTemplate.insert("saveCrmInvLog",param);
    }

    /**
     * 多账户预打生成账号信息文件
     *
     * @param actInfos 账号信息
     * @param type 业务类型 GrpTaxInvUniPrt多账号单账期专票合打  GrpEleInvUniPrt多账号单账期电子发票合打 GrpPayEleInvUniPrt多账号实收电子发票合打
     * @param unionCode 集团编号
     * @return
     */
    public void creatMultiAccountFile(List<EpInvPreprintActInfo> actInfos,String type,String unionCode) throws IOException {
        String fileName = null;
        PrintWriter out=null;

             String localTempPath = invoice_ftp_file_path;
            //String localTempPath ="E:\\invoice\\";
            File f = null;
            if (actInfos != null && actInfos.size() > 0) {
                fileName = type + actInfos.get(0).getApplicationNo()+".DAT";
                f = new File(localTempPath + fileName);
                logger.info("----生成多账户预打文件----" + localTempPath + fileName);
                if (f.exists()) {
                    f.delete();
                }
                f.createNewFile();
                logger.info("-----开始写入文件-----" );
                out = new PrintWriter(new BufferedWriter(new FileWriter(f)));
                for (int i = 0; i < actInfos.size(); i++) {
                    String str="";
                    String uc=unionCode;
                    String accountId =  actInfos.get(i).getGroupAccountId();
                    if("GrpPayEleInvUniPrt".equals(type)) {
                        BigDecimal money = actInfos.get(i).getInvoiceValue();
                        BigDecimal radio = new BigDecimal(100);
                        str=uc+"|"+accountId+"|"+money.multiply(radio).setScale(0);
                    }
                    else
                    {
                        str=uc+"|"+accountId;
                    }
                    out.println(str);
                }

                logger.info("-----写入文件完毕-----" );

            }

            out.close();
    }

    /**
     * 批量导入集团账户
     * @param file  导入文件
     * @return
     */
    public List uploadAccountId( MultipartFile file) {


        ReadExcel readExcel=new ReadExcel();
        //解析excel，获取上传的集团账户
        List<EpInvPreprintActInfo> useList = readExcel.getExcelInfo(file);

        return useList;

    }


    /**
     * 向页面输出数据
     * @param response
     * @param msg
     */
    public void sendExcelPortMsg(HttpServletResponse response, List<EpInvPreprintActInfo> msg) {
        // 设置浏览器禁用缓存
        response.setHeader("pragma", "no-cache");
        response.setHeader("cache-control", "no-cache");
        response.setContentType("text/html;charset=utf-8");
        PrintWriter out;


        List tList=new ArrayList();
        if(msg!=null&&msg.size()>0)
        {


            for(int i=0;i<msg.size();i++)
            {

                String groupAccountId=msg.get(i).getGroupAccountId();
                Map map=new HashMap();
                map.put("groupAccountId", groupAccountId);
                tList.add(map);
            }
        }
        String ss= JSONArray.toJSONString(tList);

        String param = "{\"respFlag\":\"Y\",\"respMsg\":\"sucess\",\"list\":" + ss + "}";

       System.out.println("==============="+param);
        try {
            out = response.getWriter();
            out.print(param);
            out.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     *
     * @param invPreprintDTO
     * @return
     * 查询 预打发票申请工单查询
     */
    public List<InvPreprintDTO> findAllInvPreprint (InvPreprintDTO invPreprintDTO){
        List<InvPreprintDTO> data=sqlSessionTemplate.selectList("finPageInvPreprint",invPreprintDTO);
        return data;
    }

    /**
     * 查询预打发票打印情况明细
     * @param parameter
     * @return
     */
    public List<EpInvSpeBossInfo> selectALLInvDetaSta(EpInvSpeBossInfo parameter) {
        String selectTion = "selectInvDetaSta";
        List<EpInvSpeBossInfo> result = sqlSessionTemplate.selectList(selectTion, parameter);
        return result;
    }

    public List<SeContractQddwOutDTO> georGanizationInfos(SeContractQddwOutDTO info){
        List<SeContractQddwOutDTO> list=sqlSessionTemplate.selectList("georGanizationInfos",info);
        return list;
    }

    public String getInvoiceManagerId(){
        String id=sqlSessionTemplate.selectOne("getInvoiceManagerId");
        return id;
    }


    /**
     * EXCEL 导出功能增加表头表尾
     *
     * @param  tableHeader 入参
     * @return 流程环节信息
     */

    public void  getExportAddTitle(String Title,String[]searchStr,String[] footer,String[] tableHeader,String[] methods, List list,HttpServletResponse response) {
        HSSFWorkbook workBook = ExportExcelUtil.exportExcelAddTitle(Title,searchStr,footer,tableHeader, methods, list);

        //下载机器码文件
        response.setHeader("conent-type", "application/octet-stream");
        response.setContentType("application/octet-stream");
        response.addHeader("Content-Disposition", "attachment;filename=Excel"+new SimpleDateFormat("yyyyMMdd").format(new Date())+".xls");
        OutputStream os = null;
        try {
            os = response.getOutputStream();
            workBook.write(os);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                os.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    /**
     *  计算两个日期之间的月份
     * @param  startDate  入参
     * @param  endDate  入参
     **/
    public List<String> getBetweenMonths(Date startDate, Date endDate)
    {


        List<String> list=new ArrayList();
        try
        {
            Calendar startCalendar = Calendar.getInstance();
            Calendar endCalendar = Calendar.getInstance();
            SimpleDateFormat df = new SimpleDateFormat("yyyyMM");
            startCalendar.setTime(startDate);
            endCalendar.setTime(endDate);
            while(true){
                if(startCalendar.getTimeInMillis() <= endCalendar.getTimeInMillis()){//TODO 转数组或是集合，楼主看着写吧
                   list.add(df.format(startCalendar.getTime()));
                   startCalendar.add(Calendar.MONTH, 1);
                }else{
                    break;
                }
            }
        }
        catch(Exception e)
        {
          e.printStackTrace();
        }
        return list;
    }


    public Result selectReviewerList(Reviewer info){
        Result result= sqlE.selectPage("selectReviewerList",info);
        return result;
    }

    //插入
    public int addReviewerInfo(Reviewer parameter){
        int number;
        String selectTion = "addReviewerInfo";
        number=sqlE.insertM(selectTion, parameter);
        return number;
    }

    //删除操作
    public int deleteReviewerInfo(Reviewer parameter){
        return sqlE.deleteM("deleteReviewerInfo",parameter);
    }


    //复核人添加列表
    public Result selectAllReviewerInfo(ReviewerInfo parameter){
        Result result= sqlE.selectPage("selectAllReviewerInfo",parameter);
        return result;
    }
    //复核人下拉框
    public List<Reviewer> getReviewerInfos(Reviewer info){
        List<Reviewer> list=sqlSessionTemplate.selectList("getReviewerInfos",info);
        return list;
    }





}
