package com.esop.common.uploadFile;

import com.esop.pub.ServiceUrlBean;
import com.esop.workOrderInfo.dto.OweRecordDto;
import com.esop.workOrderInfo.dto.ProCaseSendDto;
import com.esop.workOrderInfo.dto.SignOnRecordDto;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by Qiao on 2017/6/15.
 */
@RestController
public class OweRecordImportController {
    private RestTemplate restTemplate;
    @Autowired
    ServiceUrlBean serviceUrlBean ;

    public OweRecordImportController(){
        SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();
        requestFactory.setBufferRequestBody(false);
        this.restTemplate = new RestTemplate(requestFactory);
    }

    //省管理员工单数据导入
    @RequestMapping(value = "/recordImport")
    public void oweRecordImport(@RequestParam("file") MultipartFile file,OweRecordDto parameter){
        int res = 1;
        //String fileName = "C:\\Users\\Qiao\\Desktop\\oweRecord.xls";

        String cust_id = ""; //集团id
        String cust_name = ""; //集团名称
        String org_code = ""; //地市
        String product_id = ""; //产品id
        String product_name = ""; //产品名称
        String pay_period = ""; //缴费周期
        String owe_money = ""; //欠费金额
        String account_end_date; //账期结束时间
        String service_no = ""; //客户经理工号
        String service_name = ""; //客户经理姓名
        String op_time = "";//导入时间

        List<OweRecordDto> insertList = new ArrayList<>();

        //ViewListDto viewListDto = new ViewListDto();
        List<String> list = new ArrayList<>();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
        SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String str = formatter.format(new Date());

        //TODO 工号+时间
        String record_id = parameter.getLogin_no()+str;
        op_time = formatter1.format(new Date());
        //String record_id = oweRecordService.getOweRecordIdSeq();
        //System.out.println("record_id_seq-----------------"+record_id);

        try {
            InputStream is = file.getInputStream();
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);
            /*for (int numSheet = 0; numSheet < hssfWorkbook.getNumberOfSheets(); numSheet++) {
                HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(numSheet);
                if (hssfSheet == null) {
                    continue;
                }
                // 循环行Row
                for (int rowNum = 1; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
                    HSSFRow hssfRow = hssfSheet.getRow(rowNum);
                    product_id = getValue(hssfRow.getCell(3)).trim();
                    list.add(product_id);
                }
            }*/

            /*String temp = "";
            for (int i = 0; i < list.size() - 1; i++)
            {
                temp = list.get(i);
                for (int j = i + 1; j < list.size(); j++)
                {
                    if (temp.equals(list.get(j))) {
                        //有重复数据
                        res = -2;
                    }
                }
            }*/
            if(res == 1){
                for (int numSheet = 0; numSheet < hssfWorkbook.getNumberOfSheets(); numSheet++) {
                    HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(numSheet);
                    if (hssfSheet == null) {
                        continue;
                    }
                    // 循环行Row
                    for (int rowNum = 2; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
                        HSSFRow hssfRow = hssfSheet.getRow(rowNum);

                        cust_id = getValue(hssfRow.getCell(0)).trim();
                        cust_name = getValue(hssfRow.getCell(1)).trim();
                        org_code = getValue(hssfRow.getCell(2)).trim();
                        product_id = getValue(hssfRow.getCell(3)).trim();
                        product_name = getValue(hssfRow.getCell(4)).trim();
                        pay_period = getValue(hssfRow.getCell(5)).trim();
                        owe_money = getValue(hssfRow.getCell(6)).trim();
                        account_end_date = getValue(hssfRow.getCell(7)).trim();
                        service_no = getValue(hssfRow.getCell(8)).trim();
                        service_name = getValue(hssfRow.getCell(9)).trim();

                        System.out.println("account_end_date--------"+account_end_date);

                        account_end_date = account_end_date.substring(0,4)+"-"+account_end_date.substring(4,6)+"-"+account_end_date.substring(6,8);
                        //System.out.println("account_end_date--------"+account_end_date);


                        HttpHeaders headers = new HttpHeaders();
                        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

                        MultiValueMap<String, String> mapinsert= new LinkedMultiValueMap<String, String>();
                        mapinsert.add("record_id",record_id);
                        mapinsert.add("cust_id",cust_id);
                        mapinsert.add("cust_name",cust_name);
                        mapinsert.add("org_code",org_code);
                        mapinsert.add("product_id",product_id);
                        mapinsert.add("product_name",product_name);
                        mapinsert.add("pay_period",pay_period);
                        mapinsert.add("owe_money",owe_money);
                        mapinsert.add("account_end_date",account_end_date);
                        mapinsert.add("service_no",service_no);
                        mapinsert.add("service_name",service_name);
                        mapinsert.add("record_status","01");
                        mapinsert.add("op_time",op_time);

                        HttpEntity<MultiValueMap<String, String>> requestparam = new HttpEntity<MultiValueMap<String, String>>(mapinsert, headers);
                        restTemplate.postForObject("http://"+serviceUrlBean.getServiceUrl()+"/doOweRecordImport.json",requestparam,int.class);
                    }
                }
            }

            //System.out.println("res=========="+res);
        } catch (Exception e) {
            e.printStackTrace();
            res = -1;
        }

    }

    //签约工单导入
    @RequestMapping(value = "/signRecordImport")
    public void signOnRecordImport(@RequestParam("file") MultipartFile file,SignOnRecordDto parameter){
        int res = 1;

        String cust_id = ""; //集团id
        String cust_name = ""; //集团名称
        String org_code = ""; //地市
        String cust_addr = "";//集团地址
        String op_time = ""; //导入时间
        //String id = "";//流水号
        //String record_id = oweRecordService.getOweRecordIdSeq();

        List<SignOnRecordDto> insertList = new ArrayList<>();
        List<String> list = new ArrayList<>();


        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
        SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String str = formatter.format(new Date());
        //TODO 工号+时间
        String record_id = parameter.getService_no()+str;
        op_time = formatter1.format(new Date());

        try {
            InputStream is = file.getInputStream();
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);
            for (int numSheet = 0; numSheet < hssfWorkbook.getNumberOfSheets(); numSheet++) {
                HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(numSheet);
                if (hssfSheet == null) {
                    continue;
                }
                // 循环行Row
                for (int rowNum = 2; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
                    HSSFRow hssfRow = hssfSheet.getRow(rowNum);
                    cust_id = getValue(hssfRow.getCell(0)).trim();
                    cust_name = getValue(hssfRow.getCell(1)).trim();
                    org_code = getValue(hssfRow.getCell(2)).trim();
                    cust_addr = getValue(hssfRow.getCell(3)).trim();

                    /*System.out.println("cust_id1--------"+cust_id);
                    if(!"".equals(cust_id)){
                        String[] ids = cust_id.split("\\.");
                        cust_id = ids[0]+ids[1].substring(0,9);
                        System.out.println("cust_id2--------"+cust_id);
                    }
                    if(!"".equals(org_code)){
                        String[] org_codes = org_code.split("\\.");
                        org_code = org_codes[0];
                        System.out.println("org_code2--------"+org_code);
                    }*/

                    HttpHeaders headers = new HttpHeaders();
                    headers.setContentType(MediaType.MULTIPART_FORM_DATA);

                    MultiValueMap<String, String> mapinsert= new LinkedMultiValueMap<String, String>();
                    mapinsert.add("record_id",record_id);
                    mapinsert.add("cust_id",cust_id);
                    mapinsert.add("cust_name",cust_name);
                    mapinsert.add("org_code",org_code);
                    mapinsert.add("cust_addr",cust_addr);
                    mapinsert.add("op_time",op_time);
                    mapinsert.add("record_status","01");
                    HttpEntity<MultiValueMap<String, String>> requestparam = new HttpEntity<MultiValueMap<String, String>>(mapinsert, headers);
                    restTemplate.postForObject("http://"+serviceUrlBean.getServiceUrl()+"/doSignRecordImport.json",requestparam,int.class);

                }
            }
            res = 1;
        } catch (Exception e) {
            e.printStackTrace();
            res = -1;
        }
    }

    private String getValue(HSSFCell hssfCell) {
        if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
            // 返回布尔类型的值
            return String.valueOf(hssfCell.getBooleanCellValue());
        } else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
            // 返回数值类型的值
            return String.valueOf(hssfCell.getNumericCellValue());
        } else {
            // 返回字符串类型的值
            return String.valueOf(hssfCell.getStringCellValue());
        }
    }

    //省管理员工单数据导入
    @RequestMapping(value = "/proCaseRecordImport")
    public void proRecordImport(@RequestParam("file") MultipartFile file,String loginNo){
        int res = 1;

        String unit_id="";//集团编码
        String unit_name="";//集团名称
        String region_name="";//地市名称
        String region_id="";//地市编码
        String intelligent_number="";//智能V网数
        String permeability="";//4G渗透率
        String employee_number="";//员工数
        String user_number="";//移动用户数
        String manager_name="";//客户经理
        String  batch_no="";//批次号
        String login_no="";//工号
        String create_time="";//创建日期
        List<ProCaseSendDto> insertList = new ArrayList<>();
        List<String> list = new ArrayList<>();
        SimpleDateFormat sm=new SimpleDateFormat("yyyyMMddHHmmss");
        String nowTime=sm.format(new Date());
        batch_no=nowTime+loginNo;
        try {
            InputStream is = file.getInputStream();
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);

            for (int numSheet = 0; numSheet < hssfWorkbook.getNumberOfSheets(); numSheet++) {
                HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(numSheet);
                if (hssfSheet == null) {
                    continue;
                }
                // 循环行Row
                for (int rowNum = 2; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
                    HSSFRow hssfRow = hssfSheet.getRow(rowNum);
                    region_name = getValue(hssfRow.getCell(0)).trim();
                    region_id=getValue(hssfRow.getCell(1)).trim();
                    unit_id = getValue(hssfRow.getCell(2)).trim();
                    unit_name = getValue(hssfRow.getCell(3)).trim();
                    intelligent_number = getValue(hssfRow.getCell(4)).trim();
                    permeability = getValue(hssfRow.getCell(5)).trim();
                    employee_number = getValue(hssfRow.getCell(6)).trim();
                    user_number = getValue(hssfRow.getCell(7)).trim();
                    manager_name = getValue(hssfRow.getCell(8)).trim();
                    login_no=getValue(hssfRow.getCell(9)).trim();

                    /*if(!"".equals(unit_id)){
                        String[] unit_ids = unit_id.split("\\.");
                        unit_id = unit_ids[0];

                    }
                    if(!"".equals(intelligent_number)){
                        String[] intelligent_numbers = intelligent_number.split("\\.");
                        intelligent_number = intelligent_numbers[0];

                    }
                    if(!"".equals(permeability)){
                        String[] permeabilitys = permeability.split("\\.");
                        permeability = permeabilitys[0];

                    }
                    if(!"".equals(employee_number)){
                        String[] employee_numbers = employee_number.split("\\.");
                        employee_number = employee_numbers[0];

                    }
                    if(!"".equals(user_number)){
                        String[] user_numbers = user_number.split("\\.");
                        user_number = user_numbers[0];

                    }
                    if(!"".equals(region_id)){
                        String[] region_ids = region_id.split("\\.");
                        region_id = region_ids[0];

                    }*/



                    //创建时间
                    SimpleDateFormat sfm=new SimpleDateFormat("yyyy-MM-dd");
                    create_time=sfm.format(new Date());

                    HttpHeaders headers = new HttpHeaders();
                    headers.setContentType(MediaType.MULTIPART_FORM_DATA);

                    MultiValueMap<String, String> mapinsert= new LinkedMultiValueMap<String, String>();
                    mapinsert.add("unit_id",unit_id);
                    mapinsert.add("unit_name",unit_name);
                    mapinsert.add("region_name",region_name);
                    mapinsert.add("intelligent_number",intelligent_number);
                    mapinsert.add("permeability",permeability);
                    mapinsert.add("employee_number",employee_number);
                    mapinsert.add("user_number",user_number);
                    mapinsert.add("manager_name",manager_name);
                    mapinsert.add("status","01");
                    mapinsert.add("region_id",region_id);
                    mapinsert.add("batch_no",batch_no);
                    mapinsert.add("create_time",create_time);
                    mapinsert.add("login_no",login_no);

                    HttpEntity<MultiValueMap<String, String>> requestparam = new HttpEntity<MultiValueMap<String, String>>(mapinsert, headers);
                    restTemplate.postForObject("http://"+serviceUrlBean.getServiceUrl()+"/proManagerRecordImport.json",requestparam,int.class);
                }
            }


            //System.out.println("res=========="+res);
        } catch (Exception e) {
            e.printStackTrace();
            res = -1;
        }

    }

    //客户经理工单数据导入
    @RequestMapping(value = "/custCaseRecordImportInfo")
    public void custRecordImportCon(@RequestParam("file") MultipartFile file,String loginNo){
        int res = 1;

        String unit_id="";//集团编码
        String unit_name="";//集团名称
        String region_name="";//地市名称
        String region_id="";//地市编码
        String intelligent_number="";//智能V网数
        String permeability="";//4G渗透率
        String employee_number="";//员工数
        String user_number="";//移动用户数
        String manager_name="";//客户经理
        String  batch_no="";//批次号
        String login_no="";//工号
        String create_time="";//创建日期
        List<ProCaseSendDto> insertList = new ArrayList<>();
        List<String> list = new ArrayList<>();
        SimpleDateFormat sm=new SimpleDateFormat("yyyyMMddhhmmss");
        String nowTime=sm.format(new Date());
        batch_no=nowTime+loginNo;
        try {
            InputStream is = file.getInputStream();
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);

            for (int numSheet = 0; numSheet < hssfWorkbook.getNumberOfSheets(); numSheet++) {
                HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(numSheet);
                if (hssfSheet == null) {
                    continue;
                }
                // 循环行Row
                for (int rowNum = 2; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
                    HSSFRow hssfRow = hssfSheet.getRow(rowNum);
                    region_name = getValue(hssfRow.getCell(0)).trim();
                    region_id=getValue(hssfRow.getCell(1)).trim();
                    unit_id = getValue(hssfRow.getCell(2)).trim();
                    unit_name = getValue(hssfRow.getCell(3)).trim();
                    intelligent_number = getValue(hssfRow.getCell(4)).trim();
                    permeability = getValue(hssfRow.getCell(5)).trim();
                    employee_number = getValue(hssfRow.getCell(6)).trim();
                    user_number = getValue(hssfRow.getCell(7)).trim();
                    manager_name = getValue(hssfRow.getCell(8)).trim();
                    login_no=getValue(hssfRow.getCell(9)).trim();

                    /*if(!"".equals(unit_id)){
                        String[] unit_ids = unit_id.split("\\.");
                        unit_id = unit_ids[0];

                    }
                    if(!"".equals(intelligent_number)){
                        String[] intelligent_numbers = intelligent_number.split("\\.");
                        intelligent_number = intelligent_numbers[0];

                    }
                    if(!"".equals(permeability)){
                        String[] permeabilitys = permeability.split("\\.");
                        permeability = permeabilitys[0];

                    }
                    if(!"".equals(employee_number)){
                        String[] employee_numbers = employee_number.split("\\.");
                        employee_number = employee_numbers[0];

                    }
                    if(!"".equals(user_number)){
                        String[] user_numbers = user_number.split("\\.");
                        user_number = user_numbers[0];

                    }
                    if(!"".equals(region_id)){
                        String[] region_ids = region_id.split("\\.");
                        region_id = region_ids[0];

                    }*/

                    //创建时间
                    SimpleDateFormat sfm=new SimpleDateFormat("yyyy-MM-dd");
                    create_time=sfm.format(new Date());
                     HttpHeaders headers = new HttpHeaders();
                    headers.setContentType(MediaType.MULTIPART_FORM_DATA);

                    MultiValueMap<String, String> mapinsert= new LinkedMultiValueMap<String, String>();
                    mapinsert.add("unit_id",unit_id);
                    mapinsert.add("unit_name",unit_name);
                    mapinsert.add("region_name",region_name);
                    mapinsert.add("intelligent_number",intelligent_number);
                    mapinsert.add("permeability",permeability);
                    mapinsert.add("employee_number",employee_number);
                    mapinsert.add("user_number",user_number);
                    mapinsert.add("manager_name",manager_name);
                    mapinsert.add("status","08");
                    mapinsert.add("region_id",region_id);
                    mapinsert.add("batch_no",batch_no);
                    mapinsert.add("create_time",create_time);
                    mapinsert.add("login_no",login_no);
                    HttpEntity<MultiValueMap<String, String>> requestparam = new HttpEntity<MultiValueMap<String, String>>(mapinsert, headers);
                    restTemplate.postForObject("http://"+serviceUrlBean.getServiceUrl()+"/proManagerRecordImport.json",requestparam,int.class);
                }
            }


            //System.out.println("res=========="+res);
        } catch (Exception e) {
            e.printStackTrace();
            res = -1;
        }
    }

}
